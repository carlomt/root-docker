name: Docker Multiarch Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  USER: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  docker_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: amd64
          - os: ubuntu-22.04-arm
            arch: arm64
    outputs:
      root_version: ${{ steps.root_version.outputs.ROOT_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set ROOT_VERSION environment variable
        id: root_version
        run: |
          ROOT_VERSION=$(cat VERSION)
          echo "ROOT_VERSION=$ROOT_VERSION" >> $GITHUB_ENV
          echo "ROOT_VERSION=$ROOT_VERSION" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push the Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./ubuntu_from_source
          push: true
          tags: |
            ${{ env.USER }}/root:latest-${{ matrix.arch }}
            ${{ env.USER }}/root:${{ env.ROOT_VERSION }}-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}

  docker_manifest:
    needs: docker_build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push Docker manifest for "latest"
        run: |
          docker buildx imagetools create -t ${{ env.USER }}/root:latest \
            ${{ env.USER }}/root:latest-amd64 \
            ${{ env.USER }}/root:latest-arm64
      - name: Create and push Docker manifest for versioned tag
        run: |
          docker buildx imagetools create -t ${{ env.USER }}/root:${{ needs.docker_build.outputs.root_version }} \
            ${{ env.USER }}/root:${{ needs.docker_build.outputs.root_version }}-amd64 \
            ${{ env.USER }}/root:${{ needs.docker_build.outputs.root_version }}-arm64
